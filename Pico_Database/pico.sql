--
-- Script was generated by Devart dbForge Studio 2020 for MySQL, Version 9.0.338.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 8/18/2024 10:25:16 AM
-- Server version: 8.0.32
-- Client version: 4.1
--

-- 
-- Disable foreign keys
-- 
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

-- 
-- Set SQL mode
-- 
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

-- 
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8';

--
-- Set default database
--
USE pico;

--
-- Drop procedure `Proc_Cooker_GetPaging`
--
DROP PROCEDURE IF EXISTS Proc_Cooker_GetPaging;

--
-- Drop procedure `Proc_DieuHoa_DeleteMany`
--
DROP PROCEDURE IF EXISTS Proc_DieuHoa_DeleteMany;

--
-- Drop procedure `Proc_DieuHoa_GetPaging`
--
DROP PROCEDURE IF EXISTS Proc_DieuHoa_GetPaging;

--
-- Drop procedure `Proc_GroupConfig_GetPaging`
--
DROP PROCEDURE IF EXISTS Proc_GroupConfig_GetPaging;

--
-- Drop procedure `Proc_Television_DeleteMany`
--
DROP PROCEDURE IF EXISTS Proc_Television_DeleteMany;

--
-- Drop procedure `Proc_Television_GetPaging`
--
DROP PROCEDURE IF EXISTS Proc_Television_GetPaging;

--
-- Drop procedure `Proc_WashingMachine_GetPaging`
--
DROP PROCEDURE IF EXISTS Proc_WashingMachine_GetPaging;

--
-- Drop procedure `Proc_Cooker_DeleteByID`
--
DROP PROCEDURE IF EXISTS Proc_Cooker_DeleteByID;

--
-- Drop procedure `Proc_Cooker_GetAll`
--
DROP PROCEDURE IF EXISTS Proc_Cooker_GetAll;

--
-- Drop procedure `Proc_Cooker_GetByID`
--
DROP PROCEDURE IF EXISTS Proc_Cooker_GetByID;

--
-- Drop procedure `Proc_Cooker_Insert`
--
DROP PROCEDURE IF EXISTS Proc_Cooker_Insert;

--
-- Drop procedure `Proc_Cooker_Update`
--
DROP PROCEDURE IF EXISTS Proc_Cooker_Update;

--
-- Drop table `cooker`
--
DROP TABLE IF EXISTS cooker;

--
-- Drop procedure `Proc_DieuHoa_DeleteByID`
--
DROP PROCEDURE IF EXISTS Proc_DieuHoa_DeleteByID;

--
-- Drop procedure `Proc_DieuHoa_GetAll`
--
DROP PROCEDURE IF EXISTS Proc_DieuHoa_GetAll;

--
-- Drop procedure `Proc_DieuHoa_GetByID`
--
DROP PROCEDURE IF EXISTS Proc_DieuHoa_GetByID;

--
-- Drop procedure `Proc_DieuHoa_Insert`
--
DROP PROCEDURE IF EXISTS Proc_DieuHoa_Insert;

--
-- Drop procedure `Proc_DieuHoa_Update`
--
DROP PROCEDURE IF EXISTS Proc_DieuHoa_Update;

--
-- Drop table `dieuhoa`
--
DROP TABLE IF EXISTS dieuhoa;

--
-- Drop procedure `Proc_GroupConfig_DeleteByID`
--
DROP PROCEDURE IF EXISTS Proc_GroupConfig_DeleteByID;

--
-- Drop procedure `Proc_GroupConfig_GetAll`
--
DROP PROCEDURE IF EXISTS Proc_GroupConfig_GetAll;

--
-- Drop procedure `Proc_GroupConfig_GetByID`
--
DROP PROCEDURE IF EXISTS Proc_GroupConfig_GetByID;

--
-- Drop procedure `Proc_GroupConfig_Insert`
--
DROP PROCEDURE IF EXISTS Proc_GroupConfig_Insert;

--
-- Drop procedure `Proc_GroupConfig_Update`
--
DROP PROCEDURE IF EXISTS Proc_GroupConfig_Update;

--
-- Drop table `groupconfig`
--
DROP TABLE IF EXISTS groupconfig;

--
-- Drop procedure `Proc_Television_DeleteByID`
--
DROP PROCEDURE IF EXISTS Proc_Television_DeleteByID;

--
-- Drop procedure `Proc_Television_GetAll`
--
DROP PROCEDURE IF EXISTS Proc_Television_GetAll;

--
-- Drop procedure `Proc_Television_GetByID`
--
DROP PROCEDURE IF EXISTS Proc_Television_GetByID;

--
-- Drop procedure `Proc_Television_Insert`
--
DROP PROCEDURE IF EXISTS Proc_Television_Insert;

--
-- Drop procedure `Proc_Television_Update`
--
DROP PROCEDURE IF EXISTS Proc_Television_Update;

--
-- Drop table `television`
--
DROP TABLE IF EXISTS television;

--
-- Drop procedure `Proc_WashingMachine_DeleteByID`
--
DROP PROCEDURE IF EXISTS Proc_WashingMachine_DeleteByID;

--
-- Drop procedure `Proc_WashingMachine_GetAll`
--
DROP PROCEDURE IF EXISTS Proc_WashingMachine_GetAll;

--
-- Drop procedure `Proc_WashingMachine_GetByID`
--
DROP PROCEDURE IF EXISTS Proc_WashingMachine_GetByID;

--
-- Drop procedure `Proc_WashingMachine_Insert`
--
DROP PROCEDURE IF EXISTS Proc_WashingMachine_Insert;

--
-- Drop procedure `Proc_WashingMachine_Update`
--
DROP PROCEDURE IF EXISTS Proc_WashingMachine_Update;

--
-- Drop table `washingmachine`
--
DROP TABLE IF EXISTS washingmachine;

--
-- Set default database
--
USE pico;

--
-- Create table `washingmachine`
--
CREATE TABLE washingmachine (
  ID int NOT NULL AUTO_INCREMENT,
  ProductName varchar(255) DEFAULT NULL,
  ProductBrand varchar(255) DEFAULT NULL,
  ProductSize int DEFAULT NULL,
  ProductPrice int DEFAULT NULL,
  ProductOrigin int DEFAULT NULL,
  ProductMaterial varchar(255) DEFAULT NULL,
  ProductYear char(4) DEFAULT NULL,
  ProductWeight float DEFAULT NULL,
  ProductQuantity int DEFAULT NULL,
  ProductImage varchar(255) DEFAULT NULL,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
AUTO_INCREMENT = 32,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

DELIMITER $$

--
-- Create procedure `Proc_WashingMachine_Update`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_WashingMachine_Update (IN p_data json)
BEGIN
  DECLARE v_ProductName varchar(255);
  DECLARE v_ProductBrand int;
  DECLARE v_ProductPrice int;
  DECLARE v_ProductSize int;
  DECLARE v_ProductOrigin int;
  DECLARE v_ProductMaterial varchar(255);
  DECLARE v_ProductYear varchar(4);
  DECLARE v_ProductWeight decimal(10, 2);
  DECLARE v_ProductQuantity int;
  DECLARE v_ProductImage varchar(255);
  DECLARE v_ID int;

  -- Extract values from JSON
  SET v_ID = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ID'));
  SET v_ProductName = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductName'));
  SET v_ProductBrand = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductBrand'));
  SET v_ProductPrice = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductPrice'));
  SET v_ProductSize = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductSize'));
  SET v_ProductOrigin = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductOrigin'));
  SET v_ProductMaterial = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductMaterial'));
  SET v_ProductYear = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductYear'));
  SET v_ProductWeight = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductWeight'));
  SET v_ProductQuantity = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductQuantity'));
  SET v_ProductImage = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductImage'));

  -- Update statement
  UPDATE washingmachine w
  SET ProductName = v_ProductName,
      ProductBrand = v_ProductBrand,
      ProductPrice = v_ProductPrice,
      ProductSize = v_ProductSize,
      ProductOrigin = v_ProductOrigin,
      ProductMaterial = v_ProductMaterial,
      ProductYear = v_ProductYear,
      ProductWeight = v_ProductWeight,
      ProductQuantity = v_ProductQuantity,
      ProductImage = v_ProductImage
  WHERE ID = v_ID;
END
$$

--
-- Create procedure `Proc_WashingMachine_Insert`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_WashingMachine_Insert (IN p_data json)
BEGIN
  DECLARE v_ProductName varchar(255);
  DECLARE v_ProductBrand int;
  DECLARE v_ProductPrice int;
  DECLARE v_ProductSize int;
  DECLARE v_ProductOrigin int;
  DECLARE v_ProductMaterial varchar(255);
  DECLARE v_ProductYear varchar(4);
  DECLARE v_ProductWeight decimal(10, 2);
  DECLARE v_ProductQuantity int;
  DECLARE v_ProductImage varchar(255);

  -- Extract values from JSON
  SET v_ProductName = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductName'));
  SET v_ProductBrand = JSON_EXTRACT(p_data, '$.ProductBrand');
  SET v_ProductPrice = JSON_EXTRACT(p_data, '$.ProductPrice');
  SET v_ProductSize = JSON_EXTRACT(p_data, '$.ProductSize');
  SET v_ProductOrigin = JSON_EXTRACT(p_data, '$.ProductOrigin');
  SET v_ProductMaterial = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductMaterial'));
  SET v_ProductYear = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductYear'));
  SET v_ProductWeight = JSON_EXTRACT(p_data, '$.ProductWeight');
  SET v_ProductQuantity = JSON_EXTRACT(p_data, '$.ProductQuantity');
  SET v_ProductImage = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductImage'));

  -- Insert statement
  INSERT INTO washingmachine (ProductName,
  ProductBrand,
  ProductPrice,
  ProductSize,
  ProductOrigin,
  ProductMaterial,
  ProductYear,
  ProductWeight,
  ProductQuantity,
  ProductImage)
    VALUES (v_ProductName, v_ProductBrand, v_ProductPrice, v_ProductSize, v_ProductOrigin, v_ProductMaterial, v_ProductYear, v_ProductWeight, v_ProductQuantity, v_ProductImage);
END
$$

--
-- Create procedure `Proc_WashingMachine_GetByID`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_WashingMachine_GetByID (IN p_WashingMachineID int)
BEGIN
  SELECT
    *
  FROM washingmachine w
  WHERE ID = p_WashingMachineID;
END
$$

--
-- Create procedure `Proc_WashingMachine_GetAll`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_WashingMachine_GetAll ()
BEGIN
  SELECT
    *
  FROM washingmachine w;
END
$$

--
-- Create procedure `Proc_WashingMachine_DeleteByID`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_WashingMachine_DeleteByID (IN p_WashingMachineID int)
BEGIN
  DELETE
    FROM washingmachine
  WHERE ID = p_WashingMachineID;
END
$$

DELIMITER ;

--
-- Create table `television`
--
CREATE TABLE television (
  ID int NOT NULL AUTO_INCREMENT,
  ProductName varchar(255) NOT NULL,
  ProductBrand int DEFAULT NULL,
  ProductPrice int DEFAULT NULL,
  ProductSize int DEFAULT NULL,
  ProductOrigin int DEFAULT NULL,
  ProductMaterial varchar(255) DEFAULT NULL,
  ProductYear varchar(4) DEFAULT NULL,
  ProductWeight decimal(10, 2) DEFAULT NULL,
  ProductQuantity int DEFAULT NULL,
  ProductImage varchar(255) DEFAULT NULL,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
AUTO_INCREMENT = 33,
AVG_ROW_LENGTH = 1638,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

DELIMITER $$

--
-- Create procedure `Proc_Television_Update`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Television_Update (IN p_data json)
BEGIN
  DECLARE v_ProductName varchar(255);
  DECLARE v_ProductBrand int;
  DECLARE v_ProductPrice int;
  DECLARE v_ProductSize int;
  DECLARE v_ProductOrigin int;
  DECLARE v_ProductMaterial varchar(255);
  DECLARE v_ProductYear varchar(4);
  DECLARE v_ProductWeight decimal(10, 2);
  DECLARE v_ProductQuantity int;
  DECLARE v_ProductImage varchar(255);
  DECLARE v_ID int;

  -- Extract values from JSON
  SET v_ID = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ID'));
  SET v_ProductName = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductName'));
  SET v_ProductBrand = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductBrand'));
  SET v_ProductPrice = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductPrice'));
  SET v_ProductSize = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductSize'));
  SET v_ProductOrigin = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductOrigin'));
  SET v_ProductMaterial = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductMaterial'));
  SET v_ProductYear = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductYear'));
  SET v_ProductWeight = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductWeight'));
  SET v_ProductQuantity = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductQuantity'));
  SET v_ProductImage = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductImage'));

  -- Update statement
  UPDATE television
  SET ProductName = v_ProductName,
      ProductBrand = v_ProductBrand,
      ProductPrice = v_ProductPrice,
      ProductSize = v_ProductSize,
      ProductOrigin = v_ProductOrigin,
      ProductMaterial = v_ProductMaterial,
      ProductYear = v_ProductYear,
      ProductWeight = v_ProductWeight,
      ProductQuantity = v_ProductQuantity,
      ProductImage = v_ProductImage
  WHERE ID = v_ID;
END
$$

--
-- Create procedure `Proc_Television_Insert`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Television_Insert (IN p_data json)
BEGIN
  DECLARE v_ProductName varchar(255);
  DECLARE v_ProductBrand int;
  DECLARE v_ProductPrice int;
  DECLARE v_ProductSize int;
  DECLARE v_ProductOrigin int;
  DECLARE v_ProductMaterial varchar(255);
  DECLARE v_ProductYear varchar(4);
  DECLARE v_ProductWeight decimal(10, 2);
  DECLARE v_ProductQuantity int;
  DECLARE v_ProductImage varchar(255);

  -- Extract values from JSON
  SET v_ProductName = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductName'));
  SET v_ProductBrand = JSON_EXTRACT(p_data, '$.ProductBrand');
  SET v_ProductPrice = JSON_EXTRACT(p_data, '$.ProductPrice');
  SET v_ProductSize = JSON_EXTRACT(p_data, '$.ProductSize');
  SET v_ProductOrigin = JSON_EXTRACT(p_data, '$.ProductOrigin');
  SET v_ProductMaterial = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductMaterial'));
  SET v_ProductYear = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductYear'));
  SET v_ProductWeight = JSON_EXTRACT(p_data, '$.ProductWeight');
  SET v_ProductQuantity = JSON_EXTRACT(p_data, '$.ProductQuantity');
  SET v_ProductImage = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductImage'));

  -- Insert statement
  INSERT INTO Television (ProductName,
  ProductBrand,
  ProductPrice,
  ProductSize,
  ProductOrigin,
  ProductMaterial,
  ProductYear,
  ProductWeight,
  ProductQuantity,
  ProductImage)
    VALUES (v_ProductName, v_ProductBrand, v_ProductPrice, v_ProductSize, v_ProductOrigin, v_ProductMaterial, v_ProductYear, v_ProductWeight, v_ProductQuantity, v_ProductImage);
END
$$

--
-- Create procedure `Proc_Television_GetByID`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Television_GetByID (IN p_TelevisionID int)
BEGIN
  SELECT
    *
  FROM television
  WHERE ID = p_TelevisionID;
END
$$

--
-- Create procedure `Proc_Television_GetAll`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Television_GetAll ()
BEGIN
  SELECT
    *
  FROM television t;
END
$$

--
-- Create procedure `Proc_Television_DeleteByID`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Television_DeleteByID (IN p_TelevisionID int)
BEGIN
  DELETE
    FROM television
  WHERE ID = p_TelevisionID;
END
$$

DELIMITER ;

--
-- Create table `groupconfig`
--
CREATE TABLE groupconfig (
  GroupFieldConfigID int NOT NULL AUTO_INCREMENT,
  Label varchar(255) DEFAULT NULL,
  FieldName varchar(255) DEFAULT NULL,
  FieldType int DEFAULT NULL,
  IsRequired tinyint DEFAULT NULL,
  Placeholder varchar(255) DEFAULT NULL,
  ColumnIndex int DEFAULT NULL,
  ErrorText varchar(255) DEFAULT NULL,
  DrodownListID int DEFAULT NULL,
  GroupConfigID int DEFAULT NULL,
  GroupName varchar(255) DEFAULT NULL,
  GroupType int DEFAULT NULL,
  DropdownList text DEFAULT NULL,
  PRIMARY KEY (GroupFieldConfigID)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

DELIMITER $$

--
-- Create procedure `Proc_GroupConfig_Update`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_GroupConfig_Update (IN p_data json)
BEGIN
  UPDATE GroupConfig
  SET Label = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.Label')),
      FieldName = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.FieldName')),
      FieldType = JSON_EXTRACT(p_data, '$.FieldType') + 0,
      IsRequired = JSON_EXTRACT(p_data, '$.IsRequired') = 'true',
      Placeholder = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.Placeholder')),
      ColumnIndex = JSON_EXTRACT(p_data, '$.ColumnIndex') + 0,
      ErrorText = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ErrorText')),
      DrodownListID = JSON_EXTRACT(p_data, '$.DrodownListID') + 0,
      GroupConfigID = JSON_EXTRACT(p_data, '$.GroupConfigID') + 0,
      GroupName = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.GroupName')),
      GroupType = JSON_EXTRACT(p_data, '$.GroupType') + 0,
      DropdownList = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.DropdownList'))
  WHERE GroupFieldConfigID = JSON_EXTRACT(p_data, '$.GroupFieldConfigID') + 0;
END
$$

--
-- Create procedure `Proc_GroupConfig_Insert`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_GroupConfig_Insert (IN p_data json)
BEGIN
  INSERT INTO GroupConfig (Label, FieldName, FieldType, IsRequired, Placeholder, ColumnIndex, ErrorText, DrodownListID, GroupConfigID, GroupName, GroupType, DropdownList)
    SELECT
      JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.Label')),
      JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.FieldName')),
      JSON_EXTRACT(p_data, '$.FieldType') + 0,
      JSON_EXTRACT(p_data, '$.IsRequired') = 'true',
      JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.Placeholder')),
      JSON_EXTRACT(p_data, '$.ColumnIndex') + 0,
      JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ErrorText')),
      JSON_EXTRACT(p_data, '$.DrodownListID') + 0,
      JSON_EXTRACT(p_data, '$.GroupConfigID') + 0,
      JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.GroupName')),
      JSON_EXTRACT(p_data, '$.GroupType') + 0,
      JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.DropdownList'))
  ;
END
$$

--
-- Create procedure `Proc_GroupConfig_GetByID`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_GroupConfig_GetByID (IN p_GroupFieldConfigID int)
BEGIN
  SELECT
    *
  FROM GroupConfig
  WHERE GroupFieldConfigID = p_GroupFieldConfigID;
END
$$

--
-- Create procedure `Proc_GroupConfig_GetAll`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_GroupConfig_GetAll ()
BEGIN
  SELECT
    *
  FROM groupconfig g;
END
$$

--
-- Create procedure `Proc_GroupConfig_DeleteByID`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_GroupConfig_DeleteByID (IN p_GroupFieldConfigID int)
BEGIN
  DELETE
    FROM GroupConfig
  WHERE GroupFieldConfigID = p_GroupFieldConfigID;
END
$$

DELIMITER ;

--
-- Create table `dieuhoa`
--
CREATE TABLE dieuhoa (
  ID int NOT NULL AUTO_INCREMENT,
  ProductName varchar(255) DEFAULT NULL,
  ProductBrand varchar(255) DEFAULT NULL,
  ProductPrice int DEFAULT NULL,
  ProductSize int DEFAULT NULL,
  ProductOrigin int DEFAULT NULL,
  ProductMaterial varchar(255) DEFAULT NULL,
  ProductYear varchar(4) DEFAULT NULL,
  ProductWeight decimal(10, 2) DEFAULT NULL,
  ProductQuantity int DEFAULT NULL,
  ProductImage varchar(255) DEFAULT NULL,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
AUTO_INCREMENT = 12,
AVG_ROW_LENGTH = 2048,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

DELIMITER $$

--
-- Create procedure `Proc_DieuHoa_Update`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_DieuHoa_Update (IN p_data json)
BEGIN
  DECLARE v_ProductName varchar(255);
  DECLARE v_ProductBrand int;
  DECLARE v_ProductPrice int;
  DECLARE v_ProductSize int;
  DECLARE v_ProductOrigin int;
  DECLARE v_ProductMaterial varchar(255);
  DECLARE v_ProductYear varchar(4);
  DECLARE v_ProductWeight decimal(10, 2);
  DECLARE v_ProductQuantity int;
  DECLARE v_ProductImage varchar(255);
  DECLARE v_ID int;

  -- Extract values from JSON
  SET v_ID = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ID'));
  SET v_ProductName = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductName'));
  SET v_ProductBrand = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductBrand'));
  SET v_ProductPrice = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductPrice'));
  SET v_ProductSize = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductSize'));
  SET v_ProductOrigin = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductOrigin'));
  SET v_ProductMaterial = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductMaterial'));
  SET v_ProductYear = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductYear'));
  SET v_ProductWeight = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductWeight'));
  SET v_ProductQuantity = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductQuantity'));
  SET v_ProductImage = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductImage'));

  -- Update statement
  UPDATE dieuhoa
  SET ProductName = v_ProductName,
      ProductBrand = v_ProductBrand,
      ProductPrice = v_ProductPrice,
      ProductSize = v_ProductSize,
      ProductOrigin = v_ProductOrigin,
      ProductMaterial = v_ProductMaterial,
      ProductYear = v_ProductYear,
      ProductWeight = v_ProductWeight,
      ProductQuantity = v_ProductQuantity,
      ProductImage = v_ProductImage
  WHERE ID = v_ID;
END
$$

--
-- Create procedure `Proc_DieuHoa_Insert`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_DieuHoa_Insert (IN p_data json)
BEGIN
  DECLARE v_ProductName varchar(255);
  DECLARE v_ProductBrand int;
  DECLARE v_ProductPrice int;
  DECLARE v_ProductSize int;
  DECLARE v_ProductOrigin int;
  DECLARE v_ProductMaterial varchar(255);
  DECLARE v_ProductYear varchar(4);
  DECLARE v_ProductWeight decimal(10, 2);
  DECLARE v_ProductQuantity int;
  DECLARE v_ProductImage varchar(255);

  -- Extract values from JSON
  SET v_ProductName = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductName'));
  SET v_ProductBrand = JSON_EXTRACT(p_data, '$.ProductBrand');
  SET v_ProductPrice = JSON_EXTRACT(p_data, '$.ProductPrice');
  SET v_ProductSize = JSON_EXTRACT(p_data, '$.ProductSize');
  SET v_ProductOrigin = JSON_EXTRACT(p_data, '$.ProductOrigin');
  SET v_ProductMaterial = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductMaterial'));
  SET v_ProductYear = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductYear'));
  SET v_ProductWeight = JSON_EXTRACT(p_data, '$.ProductWeight');
  SET v_ProductQuantity = JSON_EXTRACT(p_data, '$.ProductQuantity');
  SET v_ProductImage = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductImage'));

  -- Insert statement
  INSERT INTO dieuhoa (ProductName,
  ProductBrand,
  ProductPrice,
  ProductSize,
  ProductOrigin,
  ProductMaterial,
  ProductYear,
  ProductWeight,
  ProductQuantity,
  ProductImage)
    VALUES (v_ProductName, v_ProductBrand, v_ProductPrice, v_ProductSize, v_ProductOrigin, v_ProductMaterial, v_ProductYear, v_ProductWeight, v_ProductQuantity, v_ProductImage);
END
$$

--
-- Create procedure `Proc_DieuHoa_GetByID`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_DieuHoa_GetByID (IN p_DieuHoaID int)
BEGIN
  SELECT
    *
  FROM DieuHoa
  WHERE ID = p_DieuHoaID;
END
$$

--
-- Create procedure `Proc_DieuHoa_GetAll`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_DieuHoa_GetAll ()
BEGIN
  SELECT
    *
  FROM DieuHoa;
END
$$

--
-- Create procedure `Proc_DieuHoa_DeleteByID`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_DieuHoa_DeleteByID (IN p_DieuHoaID int)
BEGIN
  DELETE
    FROM DieuHoa
  WHERE ID = p_DieuHoaID;
END
$$

DELIMITER ;

--
-- Create table `cooker`
--
CREATE TABLE cooker (
  ID int NOT NULL AUTO_INCREMENT,
  ProductName varchar(255) DEFAULT NULL,
  ProductBrand int DEFAULT NULL,
  ProductPrice int DEFAULT NULL,
  ProductSize int DEFAULT NULL,
  ProductOrigin int DEFAULT NULL,
  ProductMaterial varchar(255) DEFAULT NULL,
  ProductYear char(4) DEFAULT NULL,
  ProductWeight float DEFAULT NULL,
  ProductQuantity int DEFAULT NULL,
  ProductImage varchar(255) DEFAULT NULL,
  PRIMARY KEY (ID)
)
ENGINE = INNODB,
AUTO_INCREMENT = 32,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

DELIMITER $$

--
-- Create procedure `Proc_Cooker_Update`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Cooker_Update (IN p_data json)
BEGIN
  DECLARE v_ProductName varchar(255);
  DECLARE v_ProductBrand int;
  DECLARE v_ProductPrice int;
  DECLARE v_ProductSize int;
  DECLARE v_ProductOrigin int;
  DECLARE v_ProductMaterial varchar(255);
  DECLARE v_ProductYear varchar(4);
  DECLARE v_ProductWeight decimal(10, 2);
  DECLARE v_ProductQuantity int;
  DECLARE v_ProductImage varchar(255);
  DECLARE v_ID int;

  -- Extract values from JSON
  SET v_ID = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ID'));
  SET v_ProductName = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductName'));
  SET v_ProductBrand = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductBrand'));
  SET v_ProductPrice = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductPrice'));
  SET v_ProductSize = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductSize'));
  SET v_ProductOrigin = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductOrigin'));
  SET v_ProductMaterial = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductMaterial'));
  SET v_ProductYear = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductYear'));
  SET v_ProductWeight = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductWeight'));
  SET v_ProductQuantity = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductQuantity'));
  SET v_ProductImage = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductImage'));

  -- Update statement
  UPDATE cooker
  SET ProductName = v_ProductName,
      ProductBrand = v_ProductBrand,
      ProductPrice = v_ProductPrice,
      ProductSize = v_ProductSize,
      ProductOrigin = v_ProductOrigin,
      ProductMaterial = v_ProductMaterial,
      ProductYear = v_ProductYear,
      ProductWeight = v_ProductWeight,
      ProductQuantity = v_ProductQuantity,
      ProductImage = v_ProductImage
  WHERE ID = v_ID;
END
$$

--
-- Create procedure `Proc_Cooker_Insert`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Cooker_Insert (IN p_data json)
BEGIN
  DECLARE v_ProductName varchar(255);
  DECLARE v_ProductBrand int;
  DECLARE v_ProductPrice int;
  DECLARE v_ProductSize int;
  DECLARE v_ProductOrigin int;
  DECLARE v_ProductMaterial varchar(255);
  DECLARE v_ProductYear varchar(4);
  DECLARE v_ProductWeight decimal(10, 2);
  DECLARE v_ProductQuantity int;
  DECLARE v_ProductImage varchar(255);

  -- Extract values from JSON
  SET v_ProductName = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductName'));
  SET v_ProductBrand = JSON_EXTRACT(p_data, '$.ProductBrand');
  SET v_ProductPrice = JSON_EXTRACT(p_data, '$.ProductPrice');
  SET v_ProductSize = JSON_EXTRACT(p_data, '$.ProductSize');
  SET v_ProductOrigin = JSON_EXTRACT(p_data, '$.ProductOrigin');
  SET v_ProductMaterial = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductMaterial'));
  SET v_ProductYear = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductYear'));
  SET v_ProductWeight = JSON_EXTRACT(p_data, '$.ProductWeight');
  SET v_ProductQuantity = JSON_EXTRACT(p_data, '$.ProductQuantity');
  SET v_ProductImage = JSON_UNQUOTE(JSON_EXTRACT(p_data, '$.ProductImage'));

  -- Insert statement
  INSERT INTO cooker (ProductName,
  ProductBrand,
  ProductPrice,
  ProductSize,
  ProductOrigin,
  ProductMaterial,
  ProductYear,
  ProductWeight,
  ProductQuantity,
  ProductImage)
    VALUES (v_ProductName, v_ProductBrand, v_ProductPrice, v_ProductSize, v_ProductOrigin, v_ProductMaterial, v_ProductYear, v_ProductWeight, v_ProductQuantity, v_ProductImage);
END
$$

--
-- Create procedure `Proc_Cooker_GetByID`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Cooker_GetByID (IN p_CookerID int)
BEGIN
  SELECT
    *
  FROM pico.cooker
  WHERE ID = p_CookerID;
END
$$

--
-- Create procedure `Proc_Cooker_GetAll`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Cooker_GetAll ()
BEGIN
  SELECT
    *
  FROM pico.cooker;
END
$$

--
-- Create procedure `Proc_Cooker_DeleteByID`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Cooker_DeleteByID (IN p_CookerID int)
BEGIN
  DELETE
    FROM cooker
  WHERE ID = p_CookerID;
END
$$

--
-- Create procedure `Proc_WashingMachine_GetPaging`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_WashingMachine_GetPaging (IN p_keyword varchar(255),
IN p_filterObject json,
IN p_pageSize int,
IN p_pageNumber int)
BEGIN
  DECLARE v_offset int;
  SET v_offset = p_pageNumber * p_pageSize;

  -- Construct the query with dynamic filtering and keyword search
  SET @sql = CONCAT(
  'SELECT * FROM WashingMachine WHERE 1=1 ',
  IF(p_keyword IS NOT NULL AND p_keyword != '', CONCAT(' AND (ProductName LIKE "%', p_keyword, '%" OR ProductBrand LIKE "%', p_keyword, '%")'), ''),
  ' LIMIT ', p_pageSize, ' OFFSET ', v_offset
  );

  -- Execute the query
  PREPARE stmt FROM @sql;
  EXECUTE stmt;
  DEALLOCATE PREPARE stmt;

  -- Get the total record count
  SET @sql_count = CONCAT(
  'SELECT COUNT(*) FROM WashingMachine WHERE 1=1 ',
  IF(p_keyword IS NOT NULL AND p_keyword != '', CONCAT(' AND (ProductName LIKE "%', p_keyword, '%" OR ProductBrand LIKE "%', p_keyword, '%")'), '')
  );

  PREPARE stmt_count FROM @sql_count;
  EXECUTE stmt_count;
  DEALLOCATE PREPARE stmt_count;
END
$$

--
-- Create procedure `Proc_Television_GetPaging`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Television_GetPaging (IN p_keyword varchar(255),
IN p_filterObject json,
IN p_pageSize int,
IN p_pageNumber int)
BEGIN
  DECLARE v_offset int;
  SET v_offset = p_pageNumber * p_pageSize;

  -- Construct the query with dynamic filtering and keyword search
  SET @sql = CONCAT(
  'SELECT * FROM Television WHERE 1=1 ',
  IF(p_keyword IS NOT NULL AND p_keyword != '', CONCAT(' AND (ProductName LIKE "%', p_keyword, '%" OR ProductBrand LIKE "%', p_keyword, '%")'), ''),
  ' LIMIT ', p_pageSize, ' OFFSET ', v_offset
  );

  -- Execute the query
  PREPARE stmt FROM @sql;
  EXECUTE stmt;
  DEALLOCATE PREPARE stmt;

  -- Get the total record count
  SET @sql_count = CONCAT(
  'SELECT COUNT(*) FROM Television WHERE 1=1 ',
  IF(p_keyword IS NOT NULL AND p_keyword != '', CONCAT(' AND (ProductName LIKE "%', p_keyword, '%" OR ProductBrand LIKE "%', p_keyword, '%")'), '')
  );

  PREPARE stmt_count FROM @sql_count;
  EXECUTE stmt_count;
  DEALLOCATE PREPARE stmt_count;
END
$$

--
-- Create procedure `Proc_Television_DeleteMany`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Television_DeleteMany (IN p_ids varchar(255))
BEGIN
  -- Assuming that the table name is passed dynamically, you will need to use dynamic SQL
  SET @sql = CONCAT('DELETE FROM television', ' WHERE id IN (', p_ids, ');');

  -- Prepare and execute the dynamic SQL statement
  PREPARE stmt FROM @sql;
  EXECUTE stmt;
  DEALLOCATE PREPARE stmt;
END
$$

--
-- Create procedure `Proc_GroupConfig_GetPaging`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_GroupConfig_GetPaging (IN p_keyword varchar(255),
IN p_filterObject json,
IN p_pageSize int,
IN p_pageNumber int)
BEGIN
  DECLARE v_offset int;
  SET v_offset = p_pageNumber * p_pageSize;

  -- Construct the query with dynamic filtering and keyword search
  SET @sql = CONCAT(
  'SELECT * FROM GroupConfig WHERE 1=1 ',
  IF(p_keyword IS NOT NULL AND p_keyword != '', CONCAT(' AND (Label LIKE "%', p_keyword, '%" OR FieldName LIKE "%', p_keyword, '%")'), ''),
  ' LIMIT ', p_pageSize, ' OFFSET ', v_offset
  );

  -- Execute the query
  PREPARE stmt FROM @sql;
  EXECUTE stmt;
  DEALLOCATE PREPARE stmt;

  -- Get the total record count
  SET @sql_count = CONCAT(
  'SELECT COUNT(*) FROM GroupConfig WHERE 1=1 ',
  IF(p_keyword IS NOT NULL AND p_keyword != '', CONCAT(' AND (Label LIKE "%', p_keyword, '%" OR FieldName LIKE "%', p_keyword, '%")'), '')
  );

  PREPARE stmt_count FROM @sql_count;
  EXECUTE stmt_count;
  DEALLOCATE PREPARE stmt_count;
END
$$

--
-- Create procedure `Proc_DieuHoa_GetPaging`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_DieuHoa_GetPaging (IN p_keyword varchar(255),
IN p_filterObject json,
IN p_pageSize int,
IN p_pageNumber int)
BEGIN
  DECLARE v_offset int;
  SET v_offset = p_pageNumber * p_pageSize;

  -- Construct the query with dynamic filtering and keyword search
  SET @sql = CONCAT(
  'SELECT * FROM dieuhoa WHERE 1=1 ',
  IF(p_keyword IS NOT NULL AND p_keyword != '', CONCAT(' AND (ProductName LIKE "%', p_keyword, '%" OR ProductBrand LIKE "%', p_keyword, '%")'), ''),
  ' LIMIT ', p_pageSize, ' OFFSET ', v_offset
  );

  -- Execute the query
  PREPARE stmt FROM @sql;
  EXECUTE stmt;
  DEALLOCATE PREPARE stmt;

  -- Get the total record count
  SET @sql_count = CONCAT(
  'SELECT COUNT(*) FROM dieuhoa WHERE 1=1 ',
  IF(p_keyword IS NOT NULL AND p_keyword != '', CONCAT(' AND (ProductName LIKE "%', p_keyword, '%" OR ProductBrand LIKE "%', p_keyword, '%")'), '')
  );

  PREPARE stmt_count FROM @sql_count;
  EXECUTE stmt_count;
  DEALLOCATE PREPARE stmt_count;
END
$$

--
-- Create procedure `Proc_DieuHoa_DeleteMany`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_DieuHoa_DeleteMany (IN p_ids varchar(255))
BEGIN
  -- Assuming that the table name is passed dynamically, you will need to use dynamic SQL
  SET @sql = CONCAT('DELETE FROM dieuhoa', ' WHERE id IN (', p_ids, ');');

  -- Prepare and execute the dynamic SQL statement
  PREPARE stmt FROM @sql;
  EXECUTE stmt;
  DEALLOCATE PREPARE stmt;
END
$$

--
-- Create procedure `Proc_Cooker_GetPaging`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Cooker_GetPaging (IN p_keyword varchar(255),
IN p_filterObject json,
IN p_pageSize int,
IN p_pageNumber int)
BEGIN
  DECLARE v_offset int;
  SET v_offset = p_pageNumber * p_pageSize;

  -- Construct the query with dynamic filtering and keyword search
  SET @sql = CONCAT(
  'SELECT * FROM Cooker WHERE 1=1 ',
  IF(p_keyword IS NOT NULL AND p_keyword != '', CONCAT(' AND (ProductName LIKE "%', p_keyword, '%" OR ProductBrand LIKE "%', p_keyword, '%")'), ''),
  ' LIMIT ', p_pageSize, ' OFFSET ', v_offset
  );

  -- Execute the query
  PREPARE stmt FROM @sql;
  EXECUTE stmt;
  DEALLOCATE PREPARE stmt;

  -- Get the total record count
  SET @sql_count = CONCAT(
  'SELECT COUNT(*) FROM Cooker WHERE 1=1 ',
  IF(p_keyword IS NOT NULL AND p_keyword != '', CONCAT(' AND (ProductName LIKE "%', p_keyword, '%" OR ProductBrand LIKE "%', p_keyword, '%")'), '')
  );

  PREPARE stmt_count FROM @sql_count;
  EXECUTE stmt_count;
  DEALLOCATE PREPARE stmt_count;
END
$$

DELIMITER ;

-- 
-- Dumping data for table washingmachine
--
INSERT INTO washingmachine VALUES
(1, 'Washing Machine 1', '2', 15, 12000, 4, 'Steel', '2022', 65.5, 10, 'imageA.jpg'),
(2, 'Washing Machine B', '1', 12, 10000, 2, 'Plastic', '2021', 55, 20, 'imageB.jpg'),
(3, 'Washing Machine C', '1', 18, 15000, 3, 'Steel', '2023', 70.5, 15, 'imageC.jpg'),
(4, 'Washing Machine D', '1', 14, 13000, 4, 'Aluminum', '2020', 60, 25, 'imageD.jpg'),
(5, 'Washing Machine E', '1', 20, 16000, 5, 'Plastic', '2022', 80.5, 10, 'imageE.jpg'),
(6, 'Washing Machine F', '1', 17, 14000, 1, 'Steel', '2023', 75, 12, 'imageF.jpg'),
(7, 'Washing Machine G', '1', 16, 11000, 2, 'Aluminum', '2021', 65, 18, 'imageG.jpg'),
(8, 'Washing Machine H', '1', 13, 9000, 3, 'Plastic', '2020', 55.5, 22, 'imageH.jpg'),
(9, 'Washing Machine I', '1', 19, 17000, 4, 'Steel', '2022', 85, 16, 'imageI.jpg'),
(10, 'Washing Machine J', '1', 12, 10000, 5, 'Aluminum', '2023', 60.5, 20, 'imageJ.jpg'),
(11, 'Washing Machine K', '1', 15, 12000, 1, 'Plastic', '2021', 65.5, 14, 'imageK.jpg'),
(12, 'Washing Machine L', '1', 18, 15000, 2, 'Steel', '2020', 70.5, 16, 'imageL.jpg'),
(13, 'Washing Machine M', '1', 14, 13000, 3, 'Aluminum', '2022', 60, 24, 'imageM.jpg'),
(14, 'Washing Machine N', '1', 16, 11000, 4, 'Plastic', '2023', 65, 18, 'imageN.jpg'),
(15, 'Washing Machine O', '1', 20, 16000, 5, 'Steel', '2021', 80.5, 22, 'imageO.jpg'),
(16, 'Washing Machine P', '1', 13, 9000, 1, 'Aluminum', '2020', 55, 20, 'imageP.jpg'),
(17, 'Washing Machine Q', '1', 17, 14000, 2, 'Plastic', '2022', 75.5, 18, 'imageQ.jpg'),
(18, 'Washing Machine R', '1', 15, 12000, 3, 'Steel', '2023', 65.5, 16, 'imageR.jpg'),
(19, 'Washing Machine S', '1', 18, 15000, 4, 'Aluminum', '2021', 70, 12, 'imageS.jpg'),
(20, 'Washing Machine T', '1', 14, 13000, 5, 'Plastic', '2020', 60.5, 20, 'imageT.jpg'),
(21, 'Washing Machine U', '1', 20, 16000, 1, 'Steel', '2022', 80, 14, 'imageU.jpg'),
(22, 'Washing Machine V', '1', 12, 10000, 2, 'Aluminum', '2023', 55.5, 16, 'imageV.jpg'),
(23, 'Washing Machine W', '1', 17, 14000, 3, 'Plastic', '2021', 75, 12, 'imageW.jpg'),
(24, 'Washing Machine X', '1', 15, 12000, 4, 'Steel', '2020', 65, 20, 'imageX.jpg'),
(25, 'Washing Machine Y', '1', 18, 15000, 5, 'Aluminum', '2022', 70.5, 24, 'imageY.jpg'),
(26, 'Washing Machine Z', '1', 14, 13000, 1, 'Plastic', '2023', 60, 22, 'imageZ.jpg'),
(27, 'Washing Machine AA', '1', 19, 17000, 2, 'Steel', '2021', 85.5, 18, 'imageAA.jpg'),
(28, 'Washing Machine BB', '1', 13, 9000, 3, 'Aluminum', '2020', 55.5, 20, 'imageBB.jpg'),
(29, 'Washing Machine CC', '1', 16, 11000, 4, 'Plastic', '2022', 65, 16, 'imageCC.jpg'),
(30, 'Washing Machine DD', '1', 20, 16000, 5, 'Steel', '2023', 80.5, 14, 'imageDD.jpg');

-- 
-- Dumping data for table television
--
INSERT INTO television VALUES
(23, 'Sony Bravia X90J', 2, 1200, 55, 5, 'Plastic', '2023', 20.50, 10, 'sony_bravia_x90j.jpg'),
(24, 'Samsung QLED Q80T', 2, 1500, 65, 2, 'Metal', '2022', 25.00, 8, 'samsung_qled_q80t.jpg'),
(25, 'LG OLED CX', 3, 1800, 55, 3, 'Glass', '2021', 22.00, 12, 'lg_oled_cx.jpg'),
(26, 'Panasonic TX-55HX800', 4, 1000, 55, 4, 'Plastic', '2023', 19.00, 15, 'panasonic_tx_55hx800.jpg'),
(27, 'Philips Ambilight 4K', 5, 1300, 50, 5, 'Metal', '2022', 21.00, 11, 'philips_ambilight_4k.jpg'),
(28, 'Sony A8H OLED', 1, 2000, 65, 1, 'Glass', '2023', 24.00, 9, 'sony_a8h_oled.jpg'),
(29, 'Samsung Frame TV', 1, 1600, 55, 2, 'Plastic', '2022', 23.00, 10, 'samsung_frame_tv.jpg'),
(30, 'LG NanoCell 90', 1, 1400, 65, 3, 'Metal', '2021', 26.00, 7, 'lg_nanocell_90.jpg'),
(31, 'TCL 6-Series', 1, 1100, 55, 4, 'Plastic', '2022', 18.00, 14, 'tcl_6_series.jpg'),
(32, 'Vizio P-Series Quantum', 1, 1200, 65, 5, 'Glass', '2023', 20.00, 13, 'vizio_p_series_quantum.jpg');

-- 
-- Dumping data for table groupconfig
--
-- Table pico.groupconfig does not contain any data (it is empty)

-- 
-- Dumping data for table dieuhoa
--
INSERT INTO dieuhoa VALUES
(1, 'Air Conditioner', '1', 450, 1, 3, 'Plastic', '2023', 30.50, 20, 'lg_air_conditioner.jpg'),
(2, 'Dehumidifier', '1', 300, 2, 2, 'Metal', '2022', 25.00, 15, 'philips_dehumidifier.jpg'),
(3, 'Air Purifier', '1', 350, 3, 3, 'Glass', '2021', 18.50, 25, 'dyson_air_purifier.jpg'),
(4, 'Fan', '1', 120, 4, 4, 'Plastic', '2023', 5.00, 30, 'panasonic_fan.jpg'),
(5, 'Heater', '1', 200, 5, 5, 'Metal', '2022', 12.00, 10, 'xiaomi_heater.jpg'),
(6, 'Cooler', '1', 400, 1, 1, 'Plastic', '2023', 28.00, 18, 'sharp_cooler.jpg'),
(7, 'Portable AC', '1', 500, 2, 2, 'Metal', '2021', 32.00, 12, 'samsung_portable_ac.jpg');

-- 
-- Dumping data for table cooker
--
INSERT INTO cooker VALUES
(1, 'Electric Cooker A', 1, 1000, 10, 3, 'Steel', '2022', 2.5, 50, 'imageA.jpg'),
(2, 'Electric Cooker B', 1, 1200, 12, 1, 'Aluminum', '2023', 3, 40, 'imageB.jpg'),
(3, 'Electric Cooker C', 1, 1500, 8, 2, 'Plastic', '2021', 1.8, 30, 'imageC.jpg'),
(4, 'Electric Cooker D', 1, 1800, 15, 2, 'Steel', '2023', 2.9, 20, 'imageD.jpg'),
(5, 'Electric Cooker E', 1, 2000, 10, 3, 'Aluminum', '2020', 2.3, 60, 'imageE.jpg'),
(6, 'Electric Cooker F', 1, 2100, 11, 3, 'Plastic', '2022', 2, 55, 'imageF.jpg'),
(7, 'Electric Cooker G', 1, 1300, 13, 4, 'Steel', '2021', 3.1, 45, 'imageG.jpg'),
(8, 'Electric Cooker H', 1, 1400, 9, 4, 'Aluminum', '2020', 2.7, 35, 'imageH.jpg'),
(9, 'Electric Cooker I', 1, 1700, 14, 5, 'Plastic', '2022', 2.4, 25, 'imageI.jpg'),
(10, 'Electric Cooker J', 1, 1600, 12, 5, 'Steel', '2023', 2.6, 15, 'imageJ.jpg'),
(11, 'Electric Cooker K', 1, 1000, 10, 1, 'Aluminum', '2021', 3, 50, 'imageK.jpg'),
(12, 'Electric Cooker L', 1, 1200, 8, 2, 'Plastic', '2020', 2.2, 60, 'imageL.jpg'),
(13, 'Electric Cooker M', 1, 1500, 14, 3, 'Steel', '2022', 3.3, 40, 'imageM.jpg'),
(14, 'Electric Cooker N', 1, 1800, 11, 4, 'Aluminum', '2023', 2.9, 30, 'imageN.jpg'),
(15, 'Electric Cooker O', 1, 2000, 13, 5, 'Plastic', '2021', 2.5, 20, 'imageO.jpg'),
(16, 'Electric Cooker P', 1, 2100, 15, 1, 'Steel', '2020', 3.1, 25, 'imageP.jpg'),
(17, 'Electric Cooker Q', 1, 1300, 10, 2, 'Aluminum', '2022', 2.7, 35, 'imageQ.jpg'),
(18, 'Electric Cooker R', 1, 1400, 12, 3, 'Plastic', '2023', 2.3, 45, 'imageR.jpg'),
(19, 'Electric Cooker S', 1, 1700, 8, 4, 'Steel', '2021', 2.9, 55, 'imageS.jpg'),
(20, 'Electric Cooker T', 1, 1600, 14, 5, 'Aluminum', '2020', 3.2, 65, 'imageT.jpg'),
(21, 'Electric Cooker U', 1, 1000, 12, 1, 'Plastic', '2022', 2.6, 75, 'imageU.jpg'),
(22, 'Electric Cooker V', 1, 1200, 10, 2, 'Steel', '2023', 3, 85, 'imageV.jpg'),
(23, 'Electric Cooker W', 1, 1500, 13, 3, 'Aluminum', '2021', 2.8, 95, 'imageW.jpg'),
(24, 'Electric Cooker X', 1, 1800, 15, 4, 'Plastic', '2020', 2.4, 100, 'imageX.jpg'),
(25, 'Electric Cooker Y', 1, 2000, 11, 5, 'Steel', '2022', 3.2, 110, 'imageY.jpg'),
(26, 'Electric Cooker Z', 1, 2100, 9, 1, 'Aluminum', '2023', 2.9, 120, 'imageZ.jpg'),
(27, 'Electric Cooker AA', 1, 1300, 14, 2, 'Plastic', '2021', 2.5, 130, 'imageAA.jpg'),
(28, 'Electric Cooker BB', 1, 1400, 12, 3, 'Steel', '2020', 3.3, 140, 'imageBB.jpg'),
(29, 'Electric Cooker CC', 1, 1700, 10, 4, 'Aluminum', '2022', 2.7, 150, 'imageCC.jpg'),
(30, 'Electric Cooker DD', 1, 1600, 8, 5, 'Plastic', '2023', 3.1, 160, 'imageDD.jpg'),
(31, 'string', 1, 0, 0, 0, 'string', '2024', 0, 0, 'string');

-- 
-- Restore previous SQL mode
-- 
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;

-- 
-- Enable foreign keys
-- 
/*!40014 SET FOREIGN_KEY_CHECKS = @OLD_FOREIGN_KEY_CHECKS */;